package main

import (
	"encoding/base64"
	"flag"
	"fmt"
	"kms/internal/admin"
	"kms/internal/auth"
	"kms/internal/bootstrap"
	"kms/pkg/encryption"
	"os"
)

func main() {
	if len(os.Args) < 2 {
		usage()
		os.Exit(2)
	}
	switch os.Args[1] {
	case "generate_signup":
		runGenerateSignup(os.Args[2:])
	case "generate_bytes":
		runGenerateBytes(os.Args[2:])
	default:
		usage()
		os.Exit(2)
	}
}

func usage() {
	fmt.Fprintln(os.Stderr, `kms-admin commands:
		generate_signup --name <client name> [--ttl <token ttl in ms>]
		generate_bytes [--n <number of bytes>]
	`)
}

func runGenerateSignup(args []string) {
	fs := flag.NewFlagSet("generate_signup", flag.ExitOnError)
	var (
		name string
		ttl  int64
	)
	fs.StringVar(&name, "name", "", "client's name")
	fs.Int64Var(&ttl, "ttl", 86400000, "token's time-to-live")
	fs.Parse(args)

	if name == "" {
		fmt.Fprintln(os.Stderr, "error: --name is required")
		usage()
		os.Exit(2)
	}

	if err := admin.ValidateClientname(name); err != nil {
		fmt.Fprintf(os.Stderr, "invalid name: %v\n", err)
		os.Exit(1)
	}

	cfg, err := bootstrap.LoadConfig(".env")
	if err != nil {
		fmt.Fprintf(os.Stderr, "unexpected error: %v\n", err)
		os.Exit(1)
	}

	secret, err := base64.RawURLEncoding.DecodeString(cfg["SIGNUP_SECRET"])
	if err != nil {
		fmt.Fprintf(os.Stderr, "unexpected error: %v\n", err)
		os.Exit(1)
	}

	genInfo := &auth.TokenGenInfo{
		Ttl:    ttl,
		Secret: secret,
		Typ:    "signup",
	}

	token, err := auth.GenerateSignupToken(genInfo, name)
	if err != nil {
		fmt.Fprintf(os.Stderr, "unexpected error: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("generated signup token for '%s': %s\n", name, token)
}

func runGenerateBytes(args []string) {
	fs := flag.NewFlagSet("generate_bytes", flag.ExitOnError)
	var nBytes int
	fs.IntVar(&nBytes, "n", 32, "number of bytes")
	fs.Parse(args)

	bytes, err := encryption.GenerateKey(nBytes)
	if err != nil {
		fmt.Fprintf(os.Stderr, "unexpected error: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("generated bytes: %s\n", base64.RawURLEncoding.EncodeToString(bytes))
}
